generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Command {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  shell_command String
  payload       String    @db.MediumText
  status        String
  type          String
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  command_id    String

  @@map("commands")
}

model FailedJob {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)

  @@map("failed_jobs")
}

model Job {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
  @@map("jobs")
}

model Migration {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int

  @@map("migrations")
}

model PasswordReset {
  email      String    @id
  token      String
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@map("password_resets")
}

// model PostTag {
//   id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
//   postId     BigInt    @db.UnsignedBigInt
//   tagId      BigInt    @db.UnsignedBigInt
//   created_at DateTime? @db.Timestamp(0)
//   updated_at DateTime? @db.Timestamp(0)
//   post       Post      @relation(fields: [postId], references: [postId], onUpdate: Restrict, map: "post_tags_postid_foreign")
//   tag        Tag       @relation(fields: [tagId], references: [tagId], onUpdate: Restrict, map: "post_tags_tagid_foreign")

//   @@index([postId], map: "post_tags_postid_foreign")
//   @@index([tagId], map: "post_tags_tagid_foreign")
//   @@map("post_tags")
// }

model PostTag {
  tagId  BigInt @db.UnsignedBigInt
  postId BigInt @db.UnsignedBigInt
  posts  Post   @relation(fields: [postId], references: [postId], onDelete: Cascade, map: "FK_524a7e518392c4d5ca1cdf4fa86")
  tags   Tag    @relation(fields: [tagId], references: [tagId], onDelete: Cascade, map: "FK_9b387372f0d3dc529fc066eb38d")

  @@id([tagId, postId])
  @@index([postId], map: "IDX_524a7e518392c4d5ca1cdf4fa8")
  @@index([tagId], map: "IDX_9b387372f0d3dc529fc066eb38")
  @@map("post_to_tag")
}

model Post {
  postId      BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  title       String
  views       Int           @default(0) @db.UnsignedMediumInt
  thumbnail   String?       @db.Text
  slug        String        @unique(map: "IDX_54ddf9075260407dcfdd724857")
  description String?       @db.Text
  content     String?       @db.Text
  userId      BigInt?       @db.UnsignedBigInt
  status      Int           @default(1) @db.UnsignedTinyInt
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  publish_at  DateTime?     @default(now()) @db.Timestamp(0)
  love        Int           @default(0) @db.UnsignedMediumInt
  unlove      Int           @default(0) @db.UnsignedMediumInt
  post_tags   PostTag[]
  // post_to_tag post_to_tag[]
  users       User?         @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "posts_userid_foreign")

  @@index([userId], map: "posts_userid_foreign")
  @@map("posts")
}

model Statistic {
  statistic_id BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  ed_views     Int       @default(0) @db.MediumInt
  ed_new_users Int       @default(0) @db.MediumInt
  ed_traffics  Int       @default(0) @db.MediumInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)

  @@map("statistics")
}

model Tag {
  tagId       BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  name        String
  slug        String        @unique(map: "tags_slug_unique")
  description String?       @db.Text
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  post_tags   PostTag[]
  // post_to_tag post_to_tag[]

  @@map("tags")
}

model User {
  userId            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String?
  email             String    @unique(map: "IDX_97672ac88f789774dd47f7c8be")
  email_verified_at DateTime? @db.Timestamp(0)
  password          String
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  provider          String?
  provider_id       String?
  avatar            String?   @db.VarChar(255)
  posts             Post[]
  roles             roles?

  @@map("users")
}

model roles {
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  id          String   @id @db.VarChar(36)
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  privileges  String   @db.LongText
  active      Int      @default(1) @db.TinyInt
  createdById BigInt?  @unique(map: "REL_cec119ce18936c7b6c24142be3") @db.UnsignedBigInt
  users       User?    @relation(fields: [createdById], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "FK_cec119ce18936c7b6c24142be3e")
}
